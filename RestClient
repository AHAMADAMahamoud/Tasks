package com.mksoft.tasksclient.service;

import java.io.IOException;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.io.IOUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class RestClient {

	public CloseableHttpResponse get(String path) {
		CloseableHttpClient httpclient = HttpClients.createDefault();

		URI uri;
		try {
			uri = new URIBuilder().setScheme("http").setHost("localhost:8081").setPath("/api" + path)
					// .setParameter("oq", "")
					.build();

			HttpGet httpget = new HttpGet(uri);
			return httpclient.execute(httpget);

		} catch (URISyntaxException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	public List<String> getList(String path) {
		CloseableHttpResponse response = get(path);
		String result = "";
		if (response != null && response.getStatusLine().getStatusCode() == 200) {

			try {
				result = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);
			} catch (UnsupportedOperationException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		Gson gs = new Gson();
		Type listType = new TypeToken<ArrayList<Task>>() {
		}.getType();
		List<Task> list = gs.fromJson(result, listType);

		List<String> collect = list.stream()
				.map(task -> task.getId() + " " + task.getName() + " " + task.getDueDate() + " " + task.getCompleted())
				.collect(Collectors.toList());
		return collect;

	}

	public CloseableHttpResponse post(String path, String jsonData) {
		CloseableHttpClient httpclient = HttpClients.createDefault();

		URI uri;
		try {
			uri = new URIBuilder().setScheme("http").setHost("localhost:8081").setPath("/api" + path).build();
			HttpPost httpPost = new HttpPost(uri);
			StringEntity entity = new StringEntity(jsonData);
			httpPost.setEntity(entity);
			httpPost.setHeader("Accept", "application/json");
			httpPost.setHeader("Content-type", "application/json");
			return httpclient.execute(httpPost);

		} catch (URISyntaxException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	public String postData(String path, String jsonData) {
		CloseableHttpResponse response = post(path, jsonData);
		String result = "";
		if (response != null && response.getStatusLine().getStatusCode() == 200) {

			try {
				result = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);
			} catch (UnsupportedOperationException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		Task task = new Gson().fromJson(result, Task.class);
		return task.toString();

	}

}
